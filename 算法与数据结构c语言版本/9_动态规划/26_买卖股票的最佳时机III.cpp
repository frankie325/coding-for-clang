#include <iostream>
#include <vector>
using namespace std;

/*
给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入：prices = [3,3,5,0,0,3,1,4]

输出：6 解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3。

示例 2：

输入：prices = [1,2,3,4,5]

输出：4 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4。注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。

示例 3：

输入：prices = [7,6,4,3,1]

输出：0 解释：在这个情况下, 没有交易完成, 所以最大利润为0。

示例 4：

输入：prices = [1] 输出：0
*/

class Solution
{
public:
    int maxProfit(vector<int> &prices)
    {

        vector<vector<int>> dp(prices.size(), vector<int>(5, 0));
        // 1.确定dp数组的含义：可以看成是本金0元，买入股票，利润就是负数
        // *持有是指延续之前买入的状态，不持有是指延续之前卖出的状态
        // dp[i][0]不操作
        // dp[i][1]表示第i天持有股票第一次的最大利润
        // dp[i][2]表示第i天不持有股票第一次的最大利润
        // dp[i][3]表示第i天持有股票第两次的最大利润
        // dp[i][4]表示第i天不持有股票第两次的最大利润

        // 2.递推公式：
        // 之前就持有：dp[i-1][1]；第i天第一次买入：dp[i-1][0] - prices[i]
        // dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])
        // 之前就不持有：dp[i-1][2]；前一天持有 + 第i天第一次卖出：dp[i-1][1] + prices[i]
        // dp[i][2] = max(dp[i-1][2], dp[i-1][1] + prices[i])
        // 之前就持有两次：dp[i-1][3]；前一天不持有第一次 + 第i天第二次买入：dp[i-1][2] - prices[i]
        // dp[i][3] = max(dp[i-1][3], dp[i-1][2] - prices[i])
        // 之前就不持有两次：dp[i-1][4]；前一天持有两次 + 第i天第二次卖出：dp[i-1][3] + prices[i]
        // dp[i][4] = max(dp[i-1][4], dp[i-1][3] + prices[i])

        // 3.初始化：
        dp[0][1] = -prices[0]; // 第一天买入持有
        dp[0][2] = 0;          // 第一天未持有
        dp[0][3] = -prices[0]; // 第一天买入、卖出，第二次买入
        dp[0][4] = 0;          // 第一天买入、卖出，买入、卖出
        // 4.遍历顺序：
        for (int i = 1; i < prices.size(); i++)
        {
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
            dp[i][2] = max(dp[i - 1][2], dp[i - 1][1] + prices[i]);
            dp[i][3] = max(dp[i - 1][3], dp[i - 1][2] - prices[i]);
            dp[i][4] = max(dp[i - 1][4], dp[i - 1][3] + prices[i]);
        }

        return dp[prices.size() - 1][4];
    }
};

int main()
{
    vector<int> v = {3, 3, 5, 0, 0, 3, 1, 4};
    Solution s;
    int result = s.maxProfit(v);
    cout << "输出：" << result << endl;
    return 0;
}